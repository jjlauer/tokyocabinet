.TH "TCADB" 3 "2008-01-17" "Man Page" "Tokyo Cabinet"

.SH NAME
tcadb \- the abstract database API

.SH DESCRIPTION
.PP
Abstract database is a set of interfaces to use on\-memory database, hash database, and B+ tree database with the same API.
.PP
To use the abstract database API, include `\fBtcutil.h\fR', `\fBtcadb.h\fR', and related standard header files.  Usually, write the following description near the front of a source file.
.PP
.RS
.br
\fB#include <tcutil.h>\fR
.br
\fB#include <tcadb.h>\fR
.br
\fB#include <stdlib.h>\fR
.br
\fB#include <stdbool.h>\fR
.br
\fB#include <stdint.h>\fR
.RE
.PP
Objects whose type is pointer to `\fBTCADB\fR' are used to handle abstract databases.  An abstract database object is created with the function `\fBtcadbnew\fR' and is deleted with the function `\fBtcadbdel\fR'.  To avoid memory leak, it is important to delete every object when it is no longer in use.
.PP
Before operations to store or retrieve records, it is necessary to connect the abstract database object to the concrete one.  The function `\fBtcadbopen\fR' is used to open a concrete database and the function `\fBtcadbclose\fR' is used to close the database.  To avoid data missing or corruption, it is important to close every database file when it is no longer in use.

.SH API
.PP
The function `tcadbnew' is used in order to create an abstract database object.
.PP
.RS
.br
\fBTCADB *tcadbnew(void);\fR
.RS
The return value is the new abstract database object.
.RE
.RE
.PP
The function `tcadbdel' is used in order to delete an abstract database object.
.PP
.RS
.br
\fBvoid tcadbdel(TCADB *\fIadb\fB);\fR
.RS
`\fIadb\fR' specifies the abstract database object.
.RE
.RE
.PP
The function `tcadbopen' is used in order to open an abstract database.
.PP
.RS
.br
\fBbool tcadbopen(TCADB *\fIadb\fB, const char *\fIname\fB);\fR
.RS
`\fIadb\fR' specifies the abstract database object.
.RE
.RS
`\fIname\fR' specifies the name of the database.  If it is "*", the database will be an on\-memory database.  If its suffix is ".tch", the database will be a hash database.  If its suffix is ".tcb", the database will be a B+ tree database.  Otherwise, this function fails.  Tuning parameters can trail the name, separated by "#".  Each parameter is composed of the name and the number, separated by "=".  On\-memory database supports "bnum", "capnum", and "capsiz".  Hash database supports "mode", "bnum", "apow", "fpow", "opts", and "rcnum".  B+ tree database supports "mode", "lmemb", "nmemb", "bnum", "apow", "fpow", "opts", "lcnum", and "ncnum".  "capnum" specifies the capacity number of records.  "capsiz" specifies the capacity size of using memory.  Records spilled the capacity are removed by the storing order.  "mode" should be "w" of writer or "r" of reader.  The default is writer.  "opts" can contains "l" of large option, "d" of Deflate option, and "b" of TCBS option.  For example, "casket.tch#bnum=1000000#opts=ld" means that the name of the database file is "casket.tch", and the bucket number is 1000000, and the options are large and Deflate.
.RE
.RS
If successful, the return value is true, else, it is false.
.RE
.RE
.PP
The function `tcadbclose' is used in order to close an abstract database object.
.PP
.RS
.br
\fBbool tcadbclose(TCADB *\fIadb\fB);\fR
.RS
`\fIadb\fR' specifies the abstract database object.
.RE
.RS
If successful, the return value is true, else, it is false.
.RE
.RS
Update of a database is assured to be written when the database is closed.  If a writer opens a database but does not close it appropriately, the database will be broken.
.RE
.RE
.PP
The function `tcadbput' is used in order to store a record into an abstract database object.
.PP
.RS
.br
\fBbool tcadbput(TCADB *\fIadb\fB, const void *\fIkbuf\fB, int \fIksiz\fB, const void *\fIvbuf\fB, int \fIvsiz\fB);\fR
.RS
`\fIadb\fR' specifies the abstract database object.
.RE
.RS
`\fIkbuf\fR' specifies the pointer to the region of the key.
.RE
.RS
`\fIksiz\fR' specifies the size of the region of the key.
.RE
.RS
`\fIvbuf\fR' specifies the pointer to the region of the value.
.RE
.RS
`\fIvsiz\fR' specifies the size of the region of the value.
.RE
.RS
If successful, the return value is true, else, it is false.
.RE
.RS
If a record with the same key exists in the database, it is overwritten.
.RE
.RE
.PP
The function `tcadbput2' is used in order to store a string record into an abstract object.
.PP
.RS
.br
\fBbool tcadbput2(TCADB *\fIadb\fB, const char *\fIkstr\fB, const char *\fIvstr\fB);\fR
.RS
`\fIadb\fR' specifies the abstract database object.
.RE
.RS
`\fIkstr\fR' specifies the string of the key.
.RE
.RS
`\fIvstr\fR' specifies the string of the value.
.RE
.RS
If successful, the return value is true, else, it is false.
.RE
.RS
If a record with the same key exists in the database, it is overwritten.
.RE
.RE
.PP
The function `tcadbputkeep' is used in order to store a new record into an abstract database object.
.PP
.RS
.br
\fBbool tcadbputkeep(TCADB *\fIadb\fB, const void *\fIkbuf\fB, int \fIksiz\fB, const void *\fIvbuf\fB, int \fIvsiz\fB);\fR
.RS
`\fIadb\fR' specifies the abstract database object.
.RE
.RS
`\fIkbuf\fR' specifies the pointer to the region of the key.
.RE
.RS
`\fIksiz\fR' specifies the size of the region of the key.
.RE
.RS
`\fIvbuf\fR' specifies the pointer to the region of the value.
.RE
.RS
`\fIvsiz\fR' specifies the size of the region of the value.
.RE
.RS
If successful, the return value is true, else, it is false.
.RE
.RS
If a record with the same key exists in the database, this function has no effect.
.RE
.RE
.PP
The function `tcadbputkeep2' is used in order to store a new string record into an abstract database object.
.PP
.RS
.br
\fBbool tcadbputkeep2(TCADB *\fIadb\fB, const char *\fIkstr\fB, const char *\fIvstr\fB);\fR
.RS
`\fIadb\fR' specifies the abstract database object.
.RE
.RS
`\fIkstr\fR' specifies the string of the key.
.RE
.RS
`\fIvstr\fR' specifies the string of the value.
.RE
.RS
If successful, the return value is true, else, it is false.
.RE
.RS
If a record with the same key exists in the database, this function has no effect.
.RE
.RE
.PP
The function `tcadbputcat' is used in order to concatenate a value at the end of the existing record in an abstract database object.
.PP
.RS
.br
\fBbool tcadbputcat(TCADB *\fIadb\fB, const void *\fIkbuf\fB, int \fIksiz\fB, const void *\fIvbuf\fB, int \fIvsiz\fB);\fR
.RS
`\fIadb\fR' specifies the abstract database object.
.RE
.RS
`\fIkbuf\fR' specifies the pointer to the region of the key.
.RE
.RS
`\fIksiz\fR' specifies the size of the region of the key.
.RE
.RS
`\fIvbuf\fR' specifies the pointer to the region of the value.
.RE
.RS
`\fIvsiz\fR' specifies the size of the region of the value.
.RE
.RS
If successful, the return value is true, else, it is false.
.RE
.RS
If there is no corresponding record, a new record is created.
.RE
.RE
.PP
The function `tcadbputcat2' is used in order to concatenate a string value at the end of the existing record in an abstract database object.
.PP
.RS
.br
\fBbool tcadbputcat2(TCADB *\fIadb\fB, const char *\fIkstr\fB, const char *\fIvstr\fB);\fR
.RS
`\fIadb\fR' specifies the abstract database object.
.RE
.RS
`\fIkstr\fR' specifies the string of the key.
.RE
.RS
`\fIvstr\fR' specifies the string of the value.
.RE
.RS
If successful, the return value is true, else, it is false.
.RE
.RS
If there is no corresponding record, a new record is created.
.RE
.RE
.PP
The function `tcadbout' is used in order to remove a record of an abstract database object.
.PP
.RS
.br
\fBbool tcadbout(TCADB *\fIadb\fB, const void *\fIkbuf\fB, int \fIksiz\fB);\fR
.RS
`\fIadb\fR' specifies the abstract database object.
.RE
.RS
`\fIkbuf\fR' specifies the pointer to the region of the key.
.RE
.RS
`\fIksiz\fR' specifies the size of the region of the key.
.RE
.RS
If successful, the return value is true, else, it is false.
.RE
.RE
.PP
The function `tcadbout2' is used in order to remove a string record of an abstract database object.
.PP
.RS
.br
\fBbool tcadbout2(TCADB *\fIadb\fB, const char *\fIkstr\fB);\fR
.RS
`\fIadb\fR' specifies the abstract database object.
.RE
.RS
`\fIkstr\fR' specifies the string of the key.
.RE
.RS
If successful, the return value is true, else, it is false.
.RE
.RE
.PP
The function `tcadbget' is used in order to retrieve a record in an abstract database object.
.PP
.RS
.br
\fBvoid *tcadbget(TCADB *\fIadb\fB, const void *\fIkbuf\fB, int \fIksiz\fB, int *\fIsp\fB);\fR
.RS
`\fIadb\fR' specifies the abstract database object.
.RE
.RS
`\fIkbuf\fR' specifies the pointer to the region of the key.
.RE
.RS
`\fIksiz\fR' specifies the size of the region of the key.
.RE
.RS
`\fIsp\fR' specifies the pointer to the variable into which the size of the region of the return value is assigned.
.RE
.RS
If successful, the return value is the pointer to the region of the value of the corresponding record.  `NULL' is returned if no record corresponds.
.RE
.RS
Because an additional zero code is appended at the end of the region of the return value, the return value can be treated as a character string.  Because the region of the return value is allocated with the `malloc' call, it should be released with the `free' call when it is no longer in use.
.RE
.RE
.PP
The function `tcadbget2' is used in order to retrieve a string record in an abstract database object.
.PP
.RS
.br
\fBchar *tcadbget2(TCADB *\fIadb\fB, const char *\fIkstr\fB);\fR
.RS
`\fIadb\fR' specifies the abstract database object.
.RE
.RS
`\fIkstr\fR' specifies the string of the key.
.RE
.RS
If successful, the return value is the string of the value of the corresponding record.  `NULL' is returned if no record corresponds.
.RE
.RS
Because the region of the return value is allocated with the `malloc' call, it should be released with the `free' call when it is no longer in use.
.RE
.RE
.PP
The function `tcadbvsiz' is used in order to get the size of the value of a record in an abstract database object.
.PP
.RS
.br
\fBint tcadbvsiz(TCADB *\fIadb\fB, const void *\fIkbuf\fB, int \fIksiz\fB);\fR
.RS
`\fIadb\fR' specifies the abstract database object.
.RE
.RS
`\fIkbuf\fR' specifies the pointer to the region of the key.
.RE
.RS
`\fIksiz\fR' specifies the size of the region of the key.
.RE
.RS
If successful, the return value is the size of the value of the corresponding record, else, it is \-1.
.RE
.RE
.PP
The function `tcadbvsiz2' is used in order to get the size of the value of a string record in an abstract database object.
.PP
.RS
.br
\fBint tcadbvsiz2(TCADB *\fIadb\fB, const char *\fIkstr\fB);\fR
.RS
`\fIadb\fR' specifies the abstract database object.
.RE
.RS
`\fIkstr\fR' specifies the string of the key.
.RE
.RS
If successful, the return value is the size of the value of the corresponding record, else, it is \-1.
.RE
.RE
.PP
The function `tcadbiterinit' is used in order to initialize the iterator of an abstract database object.
.PP
.RS
.br
\fBbool tcadbiterinit(TCADB *\fIadb\fB);\fR
.RS
`\fIadb\fR' specifies the abstract database object.
.RE
.RS
If successful, the return value is true, else, it is false.
.RE
.RS
The iterator is used in order to access the key of every record stored in a database.
.RE
.RE
.PP
The function `tcadbiternext' is used in order to get the next key of the iterator of an abstract database object.
.PP
.RS
.br
\fBvoid *tcadbiternext(TCADB *\fIadb\fB, int *\fIsp\fB);\fR
.RS
`\fIadb\fR' specifies the abstract database object.
.RE
.RS
`\fIsp\fR' specifies the pointer to the variable into which the size of the region of the return value is assigned.
.RE
.RS
If successful, the return value is the pointer to the region of the next key, else, it is `NULL'.  `NULL' is returned when no record is to be get out of the iterator.
.RE
.RS
Because an additional zero code is appended at the end of the region of the return value, the return value can be treated as a character string.  Because the region of the return value is allocated with the `malloc' call, it should be released with the `free' call when it is no longer in use.  It is possible to access every record by iteration of calling this function.  It is allowed to update or remove records whose keys are fetched while the iteration.  However, it is not assured if updating the database is occurred while the iteration.  Besides, the order of this traversal access method is arbitrary, so it is not assured that the order of storing matches the one of the traversal access.
.RE
.RE
.PP
The function `tcadbiternext2' is used in order to get the next key string of the iterator of an abstract database object.
.PP
.RS
.br
\fBchar *tcadbiternext2(TCADB *\fIadb\fB);\fR
.RS
`\fIadb\fR' specifies the abstract database object.
.RE
.RS
If successful, the return value is the string of the next key, else, it is `NULL'.  `NULL' is returned when no record is to be get out of the iterator.
.RE
.RS
Because the region of the return value is allocated with the `malloc' call, it should be released with the `free' call when it is no longer in use.  It is possible to access every record by iteration of calling this function.  However, it is not assured if updating the database is occurred while the iteration.  Besides, the order of this traversal access method is arbitrary, so it is not assured that the order of storing matches the one of the traversal access.
.RE
.RE
.PP
The function `tcadbsync' is used in order to synchronize updated contents of an abstract database object with the file and the device.
.PP
.RS
.br
\fBbool tcadbsync(TCADB *\fIadb\fB);\fR
.RS
`\fIadb\fR' specifies the abstract database object.
.RE
.RS
If successful, the return value is true, else, it is false.
.RE
.RS
This function fails and has no effect for on\-memory database.
.RE
.RE
.PP
The function `tcadbvanish' is used in order to remove all records of an abstract database object.
.PP
.RS
.br
\fBbool tcadbvanish(TCADB *\fIadb\fB);\fR
.RS
`\fIadb\fR' specifies the abstract database object.
.RE
.RS
If successful, the return value is true, else, it is false.
.RE
.RE
.PP
The function `tcadbcopy' is used in order to copy the database file of an abstract database object.
.PP
.RS
.br
\fBbool tcadbcopy(TCADB *\fIadb\fB, const char *\fIpath\fB);\fR
.RS
`\fIadb\fR' specifies the abstract database object.
.RE
.RS
`\fIpath\fR' specifies the path of the destination file.  If it begins with `@', the trailing substring is executed as a command line.
.RE
.RS
If successful, the return value is true, else, it is false.  False is returned if the executed command returns non\-zero code.
.RE
.RS
The database file is assured to be kept synchronized and not modified while the copying or executing operation is in progress.  So, this function is useful to create a backup file of the database file.  This function fails and has no effect for on\-memory database.
.RE
.RE
.PP
The function `tcadbrnum' is used in order to get the number of records of an abstract database object.
.PP
.RS
.br
\fBuint64_t tcadbrnum(TCADB *\fIadb\fB);\fR
.RS
`\fIadb\fR' specifies the abstract database object.
.RE
.RS
The return value is the number of records or 0 if the object does not connect to any database instance.
.RE
.RE
.PP
The function `tcadbsize' is used in order to get the size of the database of an abstract database object.
.PP
.RS
.br
\fBuint64_t tcadbsize(TCADB *\fIadb\fB);\fR
.RS
`\fIadb\fR' specifies the abstract database object.
.RE
.RS
The return value is the size of the database or 0 if the object does not connect to any database instance.
.RE
.RE

.SH SEE ALSO
.PP
.BR tcatest (1),
.BR tcamgr (1),
.BR tokyocabinet (3)
