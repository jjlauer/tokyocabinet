# Makefile for Tokyo Cabinet



#================================================================
# Setting Variables
#================================================================


# Generic settings
SHELL = @SHELL@

# Package information
PACKAGE = @PACKAGE_NAME@
VERSION = @PACKAGE_VERSION@
PACKAGEDIR = $(PACKAGE)-$(VERSION)
PACKAGETGZ = $(PACKAGE)-$(VERSION).tar.gz
LIBVER = @MYLIBVER@
LIBREV = @MYLIBREV@
FORMATVER = @MYFORMATVER@

# Targets
HEADERFILES = @MYHEADERFILES@
LIBRARYFILES = @MYLIBRARYFILES@
LIBOBJFILES = @MYLIBOBJFILES@
COMMANDFILES = @MYCOMMANDFILES@
MAN1FILES = @MYMAN1FILES@
MAN3FILES = @MYMAN3FILES@
DOCUMENTFILES = @MYDOCUMENTFILES@

# Install destinations
prefix = @prefix@
exec_prefix = @exec_prefix@
INCLUDEDIR = @includedir@
LIBDIR = @libdir@
BINDIR = @bindir@
LIBEXECDIR = @libexecdir@
DATADIR = @datadir@/$(PACKAGE)
MAN1DIR = @mandir@/man1
MAN3DIR = @mandir@/man3
DESTDIR =

# Building configuration
CC = @CC@
CPPFLAGS = @MYCPPFLAGS@ \
  -D_TC_PREFIX="\"$(prefix)\"" -D_TC_INCLUDEDIR="\"$(INCLUDEDIR)\"" \
  -D_TC_LIBDIR="\"$(LIBDIR)\"" -D_TC_BINDIR="\"$(BINDIR)\"" -D_TC_LIBEXECDIR="\"$(LIBEXECDIR)\""
CFLAGS = @MYCFLAGS@
LDFLAGS = @MYLDFLAGS@
LIBS = @LIBS@
LDENV = LD_RUN_PATH=/lib:/usr/lib:$(LIBDIR):$(HOME)/lib:/usr/local/lib:@MYRUNPATH@:.
RUNENV = LD_LIBRARY_PATH=.:/lib:/usr/lib:$(LIBDIR):$(HOME)/lib:/usr/local/lib:@MYRUNPATH@
POSTCMD = @MYPOSTCMD@



#================================================================
# Suffix rules
#================================================================


.SUFFIXES :
.SUFFIXES : .c .o

.c.o :
	$(CC) -c $(CPPFLAGS) $(CFLAGS) $<


#================================================================
# Actions
#================================================================


all : $(LIBRARYFILES) $(COMMANDFILES)
	@$(POSTCMD)
	@printf '\n'
	@printf '#================================================================\n'
	@printf '# Ready to install.\n'
	@printf '#================================================================\n'


clean :
	rm -rf $(LIBRARYFILES) $(LIBOBJFILES) $(COMMANDFILES) \
	  *.o a.out check.out gmon.out leak.log casket casket-* *~


version :
	vernum=`expr $(LIBVER)00 + $(LIBREV)` ; \
	  sed -e 's/_TC_VERSION.*/_TC_VERSION    "$(VERSION)"/' \
	    -e "s/_TC_LIBVER.*/_TC_LIBVER     $$vernum/" \
	    -e 's/_TC_FORMATVER.*/_TC_FORMATVER  "$(FORMATVER)"/' tcutil.h > tcutil.h~
	[ -f tcutil.h~ ] && mv -f tcutil.h~ tcutil.h

tabify :
	ls *.c *.h | while read name ; \
	  do \
	    sed -e 's/\t/        /g' -e 's/ *$$//' $$name > $$name~; \
	    [ -f $$name~ ] && mv -f $$name~ $$name ; \
	  done


install :
	mkdir -p $(DESTDIR)$(INCLUDEDIR)
	cp -Rf $(HEADERFILES) $(DESTDIR)$(INCLUDEDIR)
	mkdir -p $(DESTDIR)$(LIBDIR)
	cp -Rf $(LIBRARYFILES) $(DESTDIR)$(LIBDIR)
	mkdir -p $(DESTDIR)$(BINDIR)
	cp -Rf $(COMMANDFILES) $(SCRIPTS) $(DESTDIR)$(BINDIR)
	mkdir -p $(DESTDIR)$(DATADIR)
	cp -Rf $(DOCUMENTFILES) $(DESTDIR)$(DATADIR)
	mkdir -p $(DESTDIR)$(MAN1DIR)
	cd man && cp -Rf $(MAN1FILES) $(DESTDIR)$(MAN1DIR)
	mkdir -p $(DESTDIR)$(MAN3DIR)
	cd man && cp -Rf $(MAN3FILES) $(DESTDIR)$(MAN3DIR)
	@printf '\n'
	@printf '#================================================================\n'
	@printf '# Thanks for using Tokyo Cabinet.\n'
	@printf '#================================================================\n'


install-strip :
	make DESTDIR=$(DESTDIR) install
	cd $(DESTDIR)$(BINDIR) && strip $(MYCOMMANDS)


uninstall :
	cd $(DESTDIR)$(INCLUDEDIR) && rm -f $(HEADERFILES)
	cd $(DESTDIR)$(LIBDIR) && rm -f $(LIBRARYFILES)
	cd $(DESTDIR)$(BINDIR) && rm -f $(COMMANDFILES)
	cd $(DESTDIR)$(MAN1DIR) && rm -f $(MAN1FILES)
	cd $(DESTDIR)$(MAN3DIR) && rm -f $(MAN3FILES)
	rm -rf $(DESTDIR)$(DATADIR)


dist :
	make version
	make tabify
	make distclean
	cd .. && tar cvf - $(PACKAGEDIR) | gzip -c > $(PACKAGETGZ)
	sync ; sync


distclean : clean
	rm -rf Makefile config.cache config.log config.status autom4te.cache


check :
	rm -rf casket*
	$(RUNENV) $(RUNCMD) ./tchmgr version
	$(RUNENV) $(RUNCMD) ./tcucodec conf
	$(RUNENV) $(RUNCMD) ./tcutest xstr 50000
	$(RUNENV) $(RUNCMD) ./tcutest list 50000
	$(RUNENV) $(RUNCMD) ./tcutest map 50000
	$(RUNENV) $(RUNCMD) ./tcutest misc 500
	$(RUNENV) $(RUNCMD) ./tcutest wicked 50000
	$(RUNENV) $(RUNCMD) ./tchtest write casket 50000 5000 5 5
	$(RUNENV) $(RUNCMD) ./tchtest read casket
	$(RUNENV) $(RUNCMD) ./tchtest remove casket
	$(RUNENV) $(RUNCMD) ./tchtest write -tl -td casket 50000 5000 5 5
	$(RUNENV) $(RUNCMD) ./tchtest read -nb casket
	$(RUNENV) $(RUNCMD) ./tchtest remove casket
	$(RUNENV) $(RUNCMD) ./tchtest write -as casket 50000 50000 5 5
	$(RUNENV) $(RUNCMD) ./tchtest read -nl casket
	$(RUNENV) $(RUNCMD) ./tchtest remove casket
	$(RUNENV) $(RUNCMD) ./tchtest rcat -pn 500 casket 50000 5000 5 5
	$(RUNENV) $(RUNCMD) ./tchtest rcat -tl -td -pn 5000 casket 50000 500 5 15
	$(RUNENV) $(RUNCMD) ./tchtest rcat -nl -pn 500 -rl casket 5000 500 5 5
	$(RUNENV) $(RUNCMD) ./tchtest misc casket 5000
	$(RUNENV) $(RUNCMD) ./tchtest misc -tl -td casket 5000
	$(RUNENV) $(RUNCMD) ./tchmgr list casket > /dev/null
	$(RUNENV) $(RUNCMD) ./tchtest wicked casket 50000
	$(RUNENV) $(RUNCMD) ./tchtest wicked -tl -td casket 50000
	$(RUNENV) $(RUNCMD) ./tchmgr create casket 3 1 1
	$(RUNENV) $(RUNCMD) ./tchmgr put casket one first
	$(RUNENV) $(RUNCMD) ./tchmgr put casket two second
	$(RUNENV) $(RUNCMD) ./tchmgr put casket three third
	$(RUNENV) $(RUNCMD) ./tchmgr put -dc casket three third
	$(RUNENV) $(RUNCMD) ./tchmgr put -dc casket three third
	$(RUNENV) $(RUNCMD) ./tchmgr put -dc casket three third
	$(RUNENV) $(RUNCMD) ./tchmgr put casket four fourth
	$(RUNENV) $(RUNCMD) ./tchmgr put casket five fifth
	$(RUNENV) $(RUNCMD) ./tchmgr out casket one > /dev/null
	$(RUNENV) $(RUNCMD) ./tchmgr out casket two > /dev/null
	$(RUNENV) $(RUNCMD) ./tchmgr get casket three > /dev/null
	$(RUNENV) $(RUNCMD) ./tchmgr get casket four > /dev/null
	$(RUNENV) $(RUNCMD) ./tchmgr get casket five > /dev/null
	$(RUNENV) $(RUNCMD) ./tchmgr list casket > /dev/null
	$(RUNENV) $(RUNCMD) ./tchmgr optimize casket
	$(RUNENV) $(RUNCMD) ./tchmgr put -dc casket three third
	$(RUNENV) $(RUNCMD) ./tchmgr get casket three > /dev/null
	$(RUNENV) $(RUNCMD) ./tchmgr get casket four > /dev/null
	$(RUNENV) $(RUNCMD) ./tchmgr get casket five > /dev/null
	$(RUNENV) $(RUNCMD) ./tchmgr list casket > /dev/null
	rm -rf casket*
	@printf '\n'
	@printf '#================================================================\n'
	@printf '# Checking completed.\n'
	@printf '#================================================================\n'


check-valgrind :
	make RUNCMD="valgrind --tool=memcheck --log-fd=1" check | tee leak.log
	grep ERROR leak.log
	grep 'at exit' leak.log


libtokyocabinet.a : $(LIBOBJFILES)
	$(AR) $(ARFLAGS) $@ $(LIBOBJFILES)


libtokyocabinet.so.$(LIBVER).$(LIBREV).0 : $(LIBOBJFILES)
	$(CC) -shared -Wl,-soname,libtokyocabinet.so.$(LIBVER) -o $@ $(LIBOBJFILES) \
	  $(LDFLAGS) $(LIBS)


libtokyocabinet.so.$(LIBVER) : libtokyocabinet.so.$(LIBVER).$(LIBREV).0
	ln -f -s libtokyocabinet.so.$(LIBVER).$(LIBREV).0 $@


libtokyocabinet.so : libtokyocabinet.so.$(LIBVER).$(LIBREV).0
	ln -f -s libtokyocabinet.so.$(LIBVER).$(LIBREV).0 $@


tcutest : tcutest.o $(LIBOBJFILES)
	$(LDENV) $(CC) $(CFLAGS) -o $@ $< $(LDFLAGS) -ltokyocabinet $(LIBS)


tcucodec : tcucodec.o $(LIBOBJFILES)
	$(LDENV) $(CC) $(CFLAGS) -o $@ $< $(LDFLAGS) -ltokyocabinet $(LIBS)


tchtest : tchtest.o $(LIBOBJFILES)
	$(LDENV) $(CC) $(CFLAGS) -o $@ $< $(LDFLAGS) -ltokyocabinet $(LIBS)


tchmgr : tchmgr.o $(LIBOBJFILES)
	$(LDENV) $(CC) $(CFLAGS) -o $@ $< $(LDFLAGS) -ltokyocabinet $(LIBS)


myconf.o : myconf.h

tcutil.o : tcutil.h myconf.h

tchdb.o : tchdb.h tcutil.h myconf.h

tcutest.o tcucodec.o : tcutil.h myconf.h

tchtest.o tchmgr.o : tcutil.h tchdb.h myconf.h



# END OF FILE
